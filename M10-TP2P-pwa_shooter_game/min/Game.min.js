class Game{constructor(){this.started=!1,this.ended=!1,this.keyPressed=void 0,this.width=0,this.height=0,this.player=void 0,this.playerShots=[],this.opponent=void 0,this.opponentShots=[],this.xDown=null,this.paused=!1,this.lifes=3}start(){this.started||(window.addEventListener("keydown",e=>this.checkKey(e,!0)),window.addEventListener("keyup",e=>this.checkKey(e,!1)),window.addEventListener("touchstart",e=>this.handleTouchStart(e,!0)),window.addEventListener("touchmove",e=>this.handleTouchMove(e,!1)),this.started=!0,this.width=GAME_UI.gameBoard.clientWidth,this.height=GAME_UI.gameBoard.clientHeight,this.player=new Player(this),this.timer=setInterval(()=>this.update(),50))}pauseOrResume(){this.paused?(this.timer=setInterval(()=>this.update(),50),GAME_UI.app.classList.remove("paused"),this.paused=!1):(clearInterval(this.timer),GAME_UI.app.classList.add("paused"),this.paused=!0)}shoot(character){const arrayShots=character instanceof Player?this.playerShots:this.opponentShots;arrayShots.push(new Shot(this,character)),this.keyPressed=void 0}removeShot(shot){const shotsArray="PLAYER"===shot.type?this.playerShots:this.opponentShots,index=shotsArray.indexOf(shot);index>-1&&shotsArray.splice(index,1)}removeOpponent(){this.opponent=void 0;let opponent_dead=document.querySelectorAll(".Opponent");setTimeout(()=>{GAME_UI.gameBoard.removeChild(opponent_dead[0])},50)}resetGame(getTo){for(this.ended=!0,this.lifes=3,document.querySelector(".score .amount").innerHTML=0,this.player=void 0,this.opponent=void 0;GAME_UI.gameBoard.firstChild;)GAME_UI.gameBoard.removeChild(GAME_UI.gameBoard.lastChild);getTo||(game=new Game,game.start())}checkKey(event,isKeyDown){if(isKeyDown)switch(event.keyCode){case 37:this.keyPressed=KEY_LEFT;break;case 32:this.keyPressed=KEY_SHOOT;break;case 39:this.keyPressed=KEY_RIGHT;break;case 27:case 81:this.paused?(console.log(this.paused),popUpToggle("modal","resume_modal")):popUpToggle("modal","pause_modal")}else this.keyPressed=void 0}getTouches(evt){return evt.touches||evt.originalEvent.touches}handleTouchStart(evt){const firstTouch=this.getTouches(evt)[0];this.xDown=firstTouch.clientX,this.keyPressed=KEY_SHOOT}handleTouchMove(evt){if(!this.xDown)return;const xUp=evt.touches[0].clientX,xDiff=this.xDown-xUp;xDiff>MIN_TOUCHMOVE?this.keyPressed=KEY_LEFT:xDiff<-MIN_TOUCHMOVE?this.keyPressed=KEY_RIGHT:this.keyPressed=KEY_SHOOT,this.xDown=null}checkCollisions(){let impact=!1;for(let i=0;i<this.opponentShots.length;i++)impact=impact||this.hasCollision(this.player,this.opponentShots[i]);(impact||this.hasCollision(this.player,this.opponent))&&this.player.die();let killed=!1;for(let i=0;i<this.playerShots.length;i++)killed=killed||this.hasCollision(this.opponent,this.playerShots[i]);killed&&this.opponent.die()}hasCollision(item1,item2){if(void 0===item2)return!1;const b1=item1.y+item1.height,r1=item1.x+item1.width,b2=item2.y+item2.height,r2=item2.x+item2.width;return!(b1<item2.y||item1.y>b2||r1<item2.x||item1.x>r2)}endGame(){let gameOver;this.ended=!0,new Entity(this,this.width/2,"auto",this.width/4,this.height/4,0,GAME_OVER_PICTURE).render(),setTimeout(()=>{navigationTo("animation","dead")},1500)}update(){this.ended||(this.player.update(),void 0===this.opponent&&(this.opponent=new Opponent(this)),this.opponent.update(),this.playerShots.forEach(shot=>{shot.update()}),this.opponentShots.forEach(shot=>{shot.update()}),this.checkCollisions(),this.render())}render(){this.player.render(),void 0!==this.opponent&&this.opponent.render(),this.playerShots.forEach(shot=>{shot.render()}),this.opponentShots.forEach(shot=>{shot.render()})}}